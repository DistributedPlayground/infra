version: '3.8'
services:
  product-db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - product-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 15s
      timeout: 15s
      retries: 50

  product-migrations:
    build:
      context: ../../product-migrations/
      dockerfile: local.Dockerfile
    container_name: product-migrations
    depends_on:
      product-db:
        condition: service_healthy

  products:
    build:
      context: ../../products/
      dockerfile: local.Dockerfile
    container_name: products
    ports:
      - 5556:5556 # api port
      - 2345:2345 # debug port
    depends_on:
      product-db:
        condition: service_healthy
    volumes:
      - ../../products/:/products

  inventory-db:
    image: redis:7.0-alpine
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - inventory-db:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 15s
      timeout: 15s
      retries: 50
  
  inventory:
    build:
      context: ../../inventory/
      dockerfile: local.Dockerfile
    container_name: inventory
    ports:
      - 5555:5555 # api port
      - 2346:2346 # debug port
    depends_on:
      inventory-db:
        condition: service_healthy
    volumes:
      - ../../inventory/:/inventory

  product-search-db:
    image: mongo:latest
    container_name: mongo_container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 15s
      timeout: 15s
      retries: 3
      start_period: 30s

  product-search:
    build:
      context: ../../product-search/
      dockerfile: local.Dockerfile
    container_name: product-search
    ports:
      - 5555:5555 # api port
      - 2346:2346 # debug port
    depends_on:
      product-search-db:
        condition: service_healthy
    volumes:
      - ../../product-search/:/product-search

volumes:
  product-db:
    driver: local
    ## We want the Redis data not to persist. 
    ## Commenting out the lines below is equivalent to run the command FLUSHALL after each restart
    ## Uncomment the following lines to persist data
  inventory-db:
    driver: local
  product-search-db:
    driver: local
